// The MIT License (MIT)

// Copyright (c) 2014 Arts Management Systems Ltd.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <extcomp.he>
#include "NVObjBase.he"
#include "OmnisTools.he"
#include "NumFormatMgr.he"

// STL includes
#include <map>

//Boost includes
#include <Boost/smart_ptr.hpp>

//LibXL includes
#include "libxl.h"

#ifndef NVOBJ_WORKSHEET_HE
#define NVOBJ_WORKSHEET_HE

// Class definition for C++ version of your object
class NVObjWorksheet : public NVObjBase
{
public:		
	// Static tracking variable
	static qshort objResourceId;  // This static variable needs to be in all inherited objects
	
	// Constructor / Destructor
	NVObjWorksheet( qobjinst qo, OmnisTools::tThreadData *pThreadData );
	virtual ~NVObjWorksheet();
    
    // Copy
    virtual void copy( NVObjWorksheet* pObj );
    
	// Methods Available and Method Call Handling
	virtual qlong returnMethods( OmnisTools::tThreadData* pThreadData );
	virtual qlong methodCall( OmnisTools::tThreadData* pThreadData );

	// Properties and Property Call Handling
	virtual qlong returnProperties( OmnisTools::tThreadData* pThreadData );
	virtual qlong getProperty( OmnisTools::tThreadData* pThreadData );
	virtual qlong setProperty( OmnisTools::tThreadData* pThreadData );
	virtual qlong canAssignProperty( OmnisTools::tThreadData* pThreadData, qlong propID );
	
	bool checkDependencies();
	boost::shared_ptr<NumFormatMgr> getNumFormatMgr();
	boost::shared_ptr<libxl::Book> getBook();
	libxl::Sheet* getSheet();
	
	void setDependencies(boost::shared_ptr<NumFormatMgr>, boost::shared_ptr<libxl::Book>, libxl::Sheet*);
	void setNumFormatMgr(boost::shared_ptr<NumFormatMgr>);
	void setBook(boost::shared_ptr<libxl::Book>);
	void setSheet(libxl::Sheet*);
private:
	// Omnis Visible Methods
	OmnisTools::tResult methodCell( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodColWidth( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodRowHeight( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodSetCol( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodSetRow( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodGetMerge( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodSetMerge( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodDelMerge( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodSetHorzPageBreak( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodSetVertPageBreak( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodSplit( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodGroupRows( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodGroupCols( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodClear( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodInsertRow( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodInsertCol( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodRemoveRow( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodRemoveCol( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodSetPrintRepeatRows( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodSetPrintRepeatCols( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodSetPrintArea( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodClearPrintRepeats( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodClearPrintArea( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodSetNamedRange( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodDelNamedRange( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	
	// Internal variables
	boost::shared_ptr<NumFormatMgr> numFormats;
	boost::shared_ptr<libxl::Book> book;
	libxl::Sheet* sheet;
};

#endif /* NVOBJ_WORKSHEET_HE */