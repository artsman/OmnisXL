// The MIT License (MIT)

// Copyright (c) 2014 Arts Management Systems Ltd.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <extcomp.he>
#include "ExcelFormat.he"
#include "OmnisTools.he"

#include <string>

#ifndef NV_OBJ_BASE_HE_
#define NV_OBJ_BASE_HE_

// Class definition for C++ version of your object
class NVObjBase
{
public:
	// Static tracking variable
	static qshort objResourceId;  // This static variable needs to be in all inherited objects
	
	// Constructor / Destructor
	NVObjBase( qobjinst objinst );
	virtual ~NVObjBase();
	
	// Object Copying
	NVObjBase* dup( qlong propID, qobjinst qo, OmnisTools::tThreadData *pThreadData );
	virtual void copy( NVObjBase* pObj );
		
	// Methods Available and Method Call Handling (These should be overriden by a sub-class)
	virtual qlong returnMethods( OmnisTools::tThreadData* );
	virtual qlong methodCall( OmnisTools::tThreadData* );

	// Properties and Property Call Handling (These should be overriden by a sub-class)
	virtual qlong returnProperties( OmnisTools::tThreadData* );
	virtual qlong getProperty( OmnisTools::tThreadData* );
	virtual qlong setProperty( OmnisTools::tThreadData* );
	virtual qlong canAssignProperty( OmnisTools::tThreadData*, qlong propID );
	
	qobjinst getInstance() { return mObjInst; }
	void setErrorInstance(qobjinst);
	
protected:
	qobjinst mErrorInst; // Optional instance to use when calling $error
	
	// Generic error handler (requires $error method)
	void callErrorMethod( OmnisTools::tThreadData* pThreadData, OmnisTools::tResult pError );
	
	// Error translation (Object Specific) -- Override in subclasses for specific errors with codes <= -100
	virtual std::string translateObjectError( OmnisTools::tResult pError );
	
private:
	// Object instance
	qobjinst mObjInst;
	
	// Error translation (Built-in Types)
	std::string translateDefaultError( OmnisTools::tResult pError );
};

// Built-in error constants
const OmnisTools::tResult 
	ERR_OK              = 0,
	ERR_RETURN_ZERO	    =-1,
	ERR_METHOD_FAILED	=-2,
	ERR_BAD_METHOD	    =-101,
	ERR_BAD_PARAMS	    =-102,
	ERR_NOMEMORY		=-103,
	ERR_NOT_SUPPORTED   =-104,
	ERR_BAD_CALCULATION =-105,
	ERR_NOT_IMPLEMENTED =-999;

// Method constants
const OmnisTools::tResult 
	METHOD_DONE_RETURN = 2,
	METHOD_OK          = 1,
	METHOD_FAILED      = 0;

// Property constants
const OmnisTools::tResult 
	PROP_OK     = 1,
	PROP_FAILED = 0;


#endif /* NV_OBJ_BASE_HE_ */
