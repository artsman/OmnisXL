// ExcelFormat resources

/*********************** C H A N G E S ***********************
//
//		v1.0	Initial
//
*************************************************************/


STRINGTABLE DISCARDABLE 
BEGIN
		 1000									"ExcelFormat"
		 1001									"ExcelFormat"
		 1002									"Workbook: Object representing an Excel Workbook"
		 1003									"Worksheet: Object representing a Worksheet within a Workbook"
		 1004									"Cell: Object representing a Cell within a Worksheet"
		 1005									"Font: Object representing a Font for a Cell"
		 1006									"Format: Object representing a Format for a Cell"
		 
		 // Static Methods
		 1900									"$setKey:$setKey(Character name, Character key) Sets the license key to use."
		 1901									"$libXLVersion:$libXLVersion() Returns version number of LibXL that this library is compiled against."
		 
		 // Static Method Params
		 1950									"name"
		 1951									"key"
		 
		 // Workbook object
		 //   Methods
		 2000									"$initialize:$initialize(ShortInt fileType = kXLxls) Initializes the file type.  Default is kXLxls, an xls file, xXLxlsx is an xlsx file.  This must be done before any other operation."
		 2001									"$load:$load(Character filePath) Loads an Excel file into memory. Returns false if error occurs. Get error info with $errorMessage."
		 2002									"$save:$save(Character filePath) Saves current workbook into an Excel file. Returns false if error occurs. Get error info $errorMessage."
		 2003									"$loadRaw:$loadRaw(Binary data, Number0dp size) Loads a xls-file from user's memory buffer. Returns false if error occurs. Get error info $errorMessage."
		 2004									"$saveRaw:$saveRaw(Binary& data, Number0dp& size) Saves an xls-file from user's memory buffer. Returns false if error occurs. Get error info $errorMessage."
		 2005									"$addSheet:$addSheet(Character sheetName, Worksheet initWorksheet) Adds a new sheet to this book, returns a Worksheet object. Use initWorksheet parameter if you wish to copy an existing sheet."
		 2006									"$getSheet:$getSheet(LongInt index) Gets a Worksheet object with specified index. Returns empty object if error occurs. Get error info with $errorMessage."
		 2007									"$delSheet:$delSheet(LongInt index) Deletes a sheet with specified index. Returns false if error occurs. Get error info with $errorMessage."
		 2008									"$addFormat:$addFormat(Format initFormat) Adds a new format to the workbook, initial parameters can be copied from other format. Returns empty object if error occurs."
		 2009									"$addFont:$addFont(Font initFont) Adds a new font to the workbook, initial parameters can be copied from other font. Returns empty object if error occurs."
		 2010									"$addCustomNumFormat:$addCustomNumFormat(Character customNumFormat) Adds a new custom number format to the workbook. The format string customNumFormat indicates how to format and render the numeric value of a cell. See custom format strings guidelines. Returns the custom format identifier."
		 2011									"$customNumFormat:$customNumFormat(LongInt fmt) Returns a custom format string for specified custom format identifier fmt. See custom format string guidelines. Returns NULL if error occurs. Get error info with $errorMessage."
		 2012									"$format:$format(LongInt index) Returns a Format object with the defined index. Index must be less than return value of $formatSize method."
		 2013									"$font:$font(LongInt index) Returns a Font object with the defined index. Index must be less than return value of $fontSize property."
		 2014									"$addPicture:$addPicture(Character filePath) Adds a picture to the workbook. Returns a picture identifier. Supports BMP, DIB, PNG, JPG and WMF picture formats. Use picture identifier with Worksheet.$setPicture(). Returns -1 if error occurs."
		 2015									"$addPictureRaw:$addPictureRaw(Binary data, Number0dp size) Adds a picture to the workbook from memory buffer: data - pointer to buffer with picture data (BMP, DIB, PNG, JPG or WMF formats); size - size of data in buffer. Returns a picture identifier."
		 2016									"$populateWithList:$populateWithList(List readFromList, Integer headerStyle = kXLPopulateNoHeader, Row header = <none>) (Max 65535 rows) Sets the data in the workbook to be the contents of the list. For style see kXLPopulate- constants. Returns bool."
		 2017									"$extractList:$extractList(Integer readHeaderStyle = kXLExtractNoHeader, List/Row definition) (Max 65535 rows on first sheet) Reads the contents of the workbook into a list. For style see xXLExtract- constants. Returns List."
		 2018									"$error:$error(LongInt errorCode, Character errorDesc, Character longErrorText, Character methodName) is called when an error has occurred. (Override to receive messages)"
		 2019									"$addFormatRef:$addFormat(Format initFormat) Adds a new format to the workbook, initial parameters can be copied from other format. Returns empty object if error occurs."
		 2020									"$addFontRef:$addFont(Font initFont) Adds a new font to the workbook, initial parameters can be copied from other font. Returns empty object if error occurs."
		 
		 //   Properties
		 2500									"$errorMessage:(Read Only) $errorMessage returns the last error message."
		 2501									"$sheetCount:(Read Only) $sheetCount returns the number of sheets in the workbook"
		 2502									"$formatSize:(Read Only) $formatSize returns the number of formats in the workbook"
		 2503									"$fontSize:(Read Only) $fontSize returns the number of fonts in the workbook"
		 2504									"$activeSheet:$activeSheet returns the active sheet index in this workbook."
		 2505									"$defaultFont:$defaultFont returns a default font name for this workbook"
		 2506									"$defaultFontSize:$defaultFontSize returns the size of the default font for this workbook"
		 2507									"$rgbMode:$rgbMode Returns whether the RGB mode is active. kTrue = RGB mode, kFalse = Index mode (default).  Used for xlsx format only."
		 
		 //   Parameters
		 2900									"fileType"
		 2901									"filePath"
		 2902									"filePath"
		 2903									"data"
		 2904									"size"
		 2905									"data"
		 2906									"size"
		 2907									"sheetName"
		 2908									"initWorksheet"
		 2909									"index"
		 2910									"index"
		 2911									"initFormat"
		 2912									"initFont"
		 2913									"customNumFormat"
		 2914									"fmt"
		 2915									"index"
		 2916									"index"
		 2917									"filePath"
		 2918									"data"
		 2919									"size"
		 2920									"readFromList"
		 2921									"headerStyle"
		 2922									"headerRow"
		 2923									"formatRow"
		 2924									"readHeader"
		 2925									"outDefinition"
		 2926									"ErrorCode"
		 2927									"ErrorDesc"
		 2928									"ErrorLongText"
		 2929									"ErrorMethodName"
		 
		 // Worksheet object
		 //   Methods
		 3000									"$cell:$cell(LongInt row, ShortInt/Character col) gets a cell object for the given row and column.  Row is indexed off 1, Column can be a number, indexed off 1, or the Excel letter format (eg. 'BF')"
		 3001									"$colWidth:$colWidth(ShortInt/Character col) returns the width of a given column.  Column can be a number, indexed off 1, or the Excel letter format (eg. 'BF')"
		 3002									"$rowHeight:$rowHeight(LongInt row) returns the height of a given row.  Row is indexed off 1."
		 3003									"$setCol:$setCol(ShortInt/Char colFirst, ShortInt/Char colLast, Number width, Format format[none], Boolean hidden[kFalse]) Sets column width and format for all columns from colFirst to colLast. Columns may be hidden. Returns kFalse if error occurs.  Get error info $errorMessage."
		 3004									"$setRow:$setRow(LongInt row, Number height, Format format[none], bool hidden[kFalse])  Sets row height and format. Row may be hidden. Returns kFalse if error occurs.  Get error info $errorMessage."
		 3005									"$getMerge:$getMerge(LongInt row, ShortInt/Char col, LongInt& rowFirst, LongInt& rowLast, shortInt& colFirst, shortInt& colLast)  Gets merged cells for cell at row, col. Result is written in rowFirst, rowLast, colFirst, colLast. Returns kFalse if error occurs. Get error info $errorMessage."
		 3006									"$setMerge:$setMerge(LongInt rowFirst, LongInt rowLast, ShortInt/Char colFirst, ShortInt/Char colLast) Sets merged cells for range: rowFirst - rowLast, colFirst - colLast. Returns kFalse if error occurs.  Get error info $errorMessage."
		 3007									"$delMerge:$delMerge(LongInt row, ShortInt/Char col)  Removes merged cells. Returns kFalse if error occurs. Get error info with errorMessage()."
		 3008									"$setHorzPageBreak:$setHorzPageBreak(LongInt row, Boolean pageBreak[kTrue])  Sets/removes a horizontal page break. Returns kFalse if error occurs. Get error info with $errorMessage()."
		 3009									"$setVertPageBreak:$setVertPageBreak(ShortInt/Char col, Boolean pageBreak[kTrue])  Sets/removes a vertical page break. Returns kFalse if error occurs. Get error info with $errorMessage()."
		 3010									"$split:$split(LongInt row, ShortInt/Char col) Splits a sheet at position."
		 3011									"$groupRows:$groupRows(LongInt rowFirst, LongInt rowLast, Boolean collapsed[kTrue]) Groups rows from rowFirst to rowLast. Returns kFalse if error occurs. Get error info with $errorMessage()."
		 3012									"$groupCols:$groupCols(ShortInt/Char colFirst, ShortInt/Char colLast, Boolean collapsed[kTrue]) Groups columns from colFirst to colLast. Returns kFalse if error occurs. Get error info with $errorMessage()."
		 3013									"$clear:$clear(LongInt rowFirst[0], LongInt rowLast[65535], ShortInt/Char colFirst[0], ShortInt/Char colLast[255])  Clears cells in specified area."
		 3014									"$insertRow:$insertRow(LongInt rowFirst, LongInt rowLast)  Inserts rows from rowFirst to rowLast. Returns kFalse if error occurs. Get error info with $errorMessage()."
		 3015									"$insertCol:$insertCol(ShortInt/Char colFirst, ShortInt/Char colLast)  Inserts columns from colFirst to colLast. Returns kFalse if error occurs. Get error info with $errorMessage()."
		 3016									"$removeRow:$removeRow(LongInt rowFirst, LongInt rowLast) Removes rows from rowFirst to rowLast. Returns kFalse if error occurs. Get error info with $errorMessage()."
		 3017									"$removeCol:$removeCol(ShortInt/Char colFirst, ShortInt/Char colLast) Removes columns from colFirst to colLast. Returns kFalse if error occurs. Get error info with $errorMessage()."
		 3018									"$setPrintRepeatRows:$setPrintRepeatRows(LongInt rowFirst, LongInt rowLast) Sets repeated rows on each page from rowFirst to rowLast."
		 3019									"$setPrintRepeatCols:$setPrintRepeatCols(ShortInt/Char colFirst, ShortInt/Char colLast)  Sets repeated columns on each page from colFirst to colLast."
		 3020									"$setPrintArea:$setPrintArea((LongInt rowFirst, LongInt rowLast, ShortInt/Char colFirst, ShortInt/Char colLast)  Sets the print area."
		 3021									"$clearPrintRepeats:$clearPrintRepeats() Clears repeated rows and columns on each page."
		 3022									"$clearPrintArea:$clearPrintArea() Clears the print area."
		 3023									"$setNamedRange:$setNamedRange(Character name, LongInt rowFirst, LongInt rowLast, ShortInt/Char colFirst, ShortInt/Char colLast)  Sets the named range. Returns kFalse if error occurs. Get error info with $errorMessage()."
		 3024									"$delNamedRange:$delNamedRange(Character name)  Deletes the named range by name. Returns kFalse if error occurs. Get error info with $errorMessage()."
		  
		 //   Properties
		 3500									"$firstRow:(Read Only) $firstRow Returns the first row in the sheet that contains a used cell."
		 3501									"$lastRow:(Read Only) $lastRow Returns the index of the row after the last row in the sheet that contains a used cell."
		 3502									"$firstCol:(Read Only) $firstCol Returns the first column in the sheet that contains a used cell."
		 3503									"$lastCol:(Read Only) $lastCol Returns the index of the column after the last column in the sheet that contains a used cell."
		 3504									"$groupSummaryBelow:$groupSummaryBelow Returns whether grouping rows summary is below. Returns kTrue if summary is below and kFalse if isn't."
		 3505									"$groupSummaryRight:$groupSummaryRight Returns whether grouping columns summary is to the right. Returns kTrue if summary is to the right and kFalse if isn't."
		 3506									"$paper:$paper Returns the paper size. See ExcelFormat-Paper constants"
		 3507									"$displayGridlines:$displayGridlines Returns whether the gridlines are displayed. Returns kTrue if gridlines are displayed and kFalse if aren't."
		 3508									"$printGridlines:$printGridlines Returns whether the gridlines are printed. Return kTrue if gridlines are printed and kFalse if aren't."
		 3509									"$zoom:$zoom Returns the zoom level of the current view as a percentage."
		 3510									"$printZoom:$printZoom Returns the scaling factor for printing as a percentage."
		 3511									"$landscape:$landscape Returns a page orientation mode, true - landscape mode, false - portrait mode."
		 3512									"$header:$header Returns the text that appears at the top of every page when printed. The length of the text must be less than or equal to 255."
		 3513									"$headerMargin:(Read Only)$headerMargin Returns the header margin in inches."
		 3514									"$footer:$footer Returns the footer text for the sheet when printed. The footer text appears at the bottom of every page when printed. The length of the text must be less than or equal to 255"
		 3515									"$footerMargin:$footerMargin Returns the footer margin in inches."
		 3516									"$hCenter:$hCenter Returns whether the sheet is centered horizontally when printed. kTrue = Centered, kFalse = Not Centered."
		 3517									"$vCenter:$vCenter Returns whether the sheet is centered vertically when printed. kTrue = Centered, kFalse = Not Centered."
		 3518									"$marginLeft:$marginLeft Returns the left margin of the sheet in inches."
		 3519									"$marginRight:$marginRight Returns the right margin of the sheet in inches."
		 3520									"$marginTop:$marginTop Returns the top margin of the sheet in inches."
		 3521									"$marginBottom:$marginBottom Returns the bottom margin of the sheet in inches."
		 3522									"$printRowCol:$printRowCol Returns whether the row and column headers are printed. kTrue = Printed, kFalse = Not Printed."
		 3523									"$protected:$protected Returns whether sheet is protected. kTrue = Protected, kFalse = Not Protected."
		 
		 //   Parameters
		 3800									"row"
		 3801									"col"
		 3802									"col"
		 3803									"row"
		 3804									"colFirst"
		 3805									"colLast"
		 3806									"width"
		 3807									"format"
		 3808									"hidden"
		 3809									"row"
		 3810									"height"
		 3811									"format"
		 3812									"hidden"
		 3813									"row"
		 3814									"col"
		 3815									"rowFirst"
		 3816									"rowLast"
		 3817									"colFirst"
		 3818									"colLast"
		 3819									"rowFirst"
		 3820									"rowLast"
		 3821									"colFirst"
		 3822									"colLast"
		 3823									"row"
		 3824									"col"
		 3825									"row"
		 3826									"pageBreak"
		 3827									"col"
		 3828									"pageBreak"
		 3829									"row"
		 3830									"col"
		 3831									"rowFirst"
		 3832									"rowLast"
		 3833									"collapsed"
		 3834									"colFirst"
		 3835									"colLast"
		 3836									"collapsed"
		 3837									"rowFirst"
		 3838									"rowLast"
		 3839									"colFirst"
		 3840									"colLast"
		 3841									"rowFirst"
		 3842									"rowLast"
		 3843									"colFirst"
		 3844									"colLast"
		 3845									"rowFirst"
		 3846									"rowLast"
		 3847									"colFirst"
		 3848									"colLast"
		 3849									"rowFirst"
		 3850									"rowLast"
		 3851									"colFirst"
		 3852									"colLast"
		 3853									"rowFirst"
		 3854									"rowLast"
		 3855									"colFirst"
		 3856									"colLast"
		 3857									"name"
		 3858									"rowFirst"
		 3859									"rowLast"
		 3860									"colFirst"
		 3861									"colLast"
		 3862									"name"
		 
		 // Cell object
		 //   Methods
		 4000									"$setPicture:$setPicture(LongInt pictureID, -- Number scale -or- LongInt height, LongInt width) Sets a picture(See Workbook.$addPicture) at position with row and col with scale factor or with custom size."
		 4001									"$setValue:$setValue(Any value, (Optional) Format format, (Optional) LongInt typeConstant) Sets the value in the cell.  Can optionally pass a type constant in the second parameter to force a certain type of data.  Otherwise the type will be detected from the passed in value."
		 4002									"$clear:$clear() Clears the contents of the cell."
		 4003									"$setComment:$setComment(Character comment, Character author, LongInt width = 129, LongInt height = 75) Writes a comment to the cell."
		 4004									"$readFormula:$readFormula Returns a character string with the formula"
		 4005									"$writeFormula:$writeFormula(Character formula) Writes the character string, representing a formula, into the cell.  NOTE: the = is not required as the first character."
		 
		 //   Properties
		 4100									"$type:(Read Only) $type Returns kXLType constant for the type of data stored in the cell."
		 4101									"$error:(Read Only) $error Returns kXLTypeError constant for the error contained within the cell."
		 4102									"$format:$format Returns the format object being used for the cell.  Assign with Format.$self()."
		 4103									"$value:$value Returns the value currently in the cell"
		 4104									"$font:$font Returns the font object for the current format.  Assign with Font.$self()"
		 4105									"$row:$row Returns the row that is being represented by the cell object."
		 4106									"$col:$col Returns the column that is being represented by the cell object."
		 4107									"$colLetter:$colLetter Returns the column letter that is being represented by the cell object."
		 4108									"$comment:$comment Returns the comment for cell."
		 4109									"$isFormula:$isFormula Returns if the contents of a cell is a formula"
		 4110									"$isDate:$isDate Returns if the contents of a cell is a date."
		 
		 //   Parameters
		 4900									"pictureID"
		 4901									"scale_or_height"
		 4902									"width"
		 4903									"value"
		 4904									"format"
		 4905									"type"
		 4906									"comment"
		 4907									"author"
		 4908									"width"
		 4909									"height"
         4910                                   "formula"
		 
		 // Format object
		 //   Methods
		 5000									"$setBorder:$setBorder(LongInt borderStyleConstant) Set all borders to a border style constant."
		 5001									"$setBorderColor:$setBorderColor(LongInt colorConstant) Set color for all borders."
		 5002									"$self:$self(Bool asObjRef) Gets an object (kFalse) or object reference (kTrue or default) for the current Format.  Omnis workaround."
		 
		 //   Properties
		 5100									"$locked:$locked Returns whether the locked protection property is set to kTrue."
		 5101									"$hidden:$hidden Returns whether the hidden protection property is set to kTrue."
		 5102									"$font:$font Returns the pointer to the current font.  Assign with Font.$self(). "
		 5103									"$numFormat:$numFormat Returns the number format identifier. Use kXLNumFormat... constants or integer returned from Workbook.$getCustomNumFormat()."
		 5104									"$alignH:$alignH Returns the horizontal alignment.  Use kXLAlignH... constants."
		 5105									"$alignV:$alignV Returns the vertical alignment.  Use kXLAlignV... constants."
		 5106									"$wrap:$wrap Returns whether the cell text is wrapped."
		 5107									"$rotation:$rotation Returns the text rotation."
		 5108									"$indent:$indent Returns the text indentation level."
		 5109									"$shrinkToFit:$shrinkToFit Returns whether the cell is shrink-to-fit."
		 5110									"$borderLeft:$borderLeft  Returns the left border style.  Use kXLBorder... constants."
		 5111									"$borderRight:$borderRight  Returns the right border style.  Use kXLBorder... constants."
		 5112									"$borderTop:$borderTop  Returns the top border style.  Use kXLBorder... constants."
		 5113									"$borderBottom:$borderBottom  Returns bottom border style.  Use kXLBorder... constants."
		 5114									"$borderLeftColor:$borderLeftColor Sets the left border color.  Use kXLColor... constants."
		 5115									"$borderRightColor:$borderRightColor Sets the right border color.  Use kXLColor... constants."
		 5116									"$borderTopColor:$borderTopColor Sets the top border color.  Use kXLColor... constants."
		 5117									"$borderBottomColor:$borderBottomColor Sets the bottom border color.  Use kXLColor... constants."
		 5118									"$borderDiagonal:$borderDiagonal  Sets the diagonal border.  Use kXLBorderDiagonal... constants."
		 5119									"$borderDiagonalColor:$borderDiagonalColor Set the color of the Diagonal border.  Use kXLColor... constants."
		 5120									"$fillPattern:$fillPattern Sets the fill pattern.  Use kXLFillPattern... constants."
		 5121									"$patternForegroundColor:$patternForegroundColor Sets the foreground color of the fill pattern.  Use kXLColor... constants."
		 5122									"$patternBackgroundColor:$patternBackgroundColor Sets the background color of the fill pattern.  Use kXLColor... constants."
		 
		 //   Parameters
		 //   Parameters
		 5900									"borderStyleConstant"
		 5901									"colorConstant"
		 5902									"asObjRef"
		 
		 // Font object
		 //   Methods
		 6000									"$self:$self(Bool asObjRef) Gets an object (kFalse) and or object reference (kTrue or default) for the current Font.  Omnis workaround."
		 
		 //   Properties
		 6100									"$size:$size Returns the size of the font in points."
		 6101									"$italic:$italic Returns whether the font is italic."
		 6102									"$strikeOut:$strikeOut Returns whether the font is strike-out"
		 6103									"$color:$color Returns the font color.  Use the kXLColor... constants"
		 6104									"$bold:$bold Returns whether the font is bold."
		 6105									"$script:$script Sets the script style of the font.  Use the kXLScript... constants."
		 6106									"$underline:$underline Returns the underline style of the font.  Used the kXLUnderline... constants."
		 6107									"$fontname:$fontname Returns the name of the font."
		 
		 //   Parameters
		 6900									"asObjRef"
		 
		 // Constants
		 23000									"kXL"
		 
		 //   Workbook
		 23001									"Formats~xls:10:xls:Save in Excel 97-2003 BIFF8 .xls format."
		 23002									"xlsx:11:xlsx:Save in Excel 2007+ OOXML .xlsx format."
		 23003									"PopulateList~PopulateNoHeader:0:PopulateNoHeader:Do not include a header when writing data to the excel file."
		 23004									"PopulateDefinitionHeader:1:PopulateDefinitionHeader:Include a header with the definition of the data list when writing data to the excel file."
		 23005									"PopulateCustomHeader:2:PopulateCustomHeader:Use the 3rd parameter's 1st row contents for the column header names when writing data to the excel file."
		 23006									"PopulateCustomHeaderAndFormat:3:PopulateCustomHeaderAndFormat:Use the 4th parameter's 1st row contents for the number format to use when writing data to the excel file."
		 
		 23010									"ExtractList~ExtractNoHeader:0:ExtractNoHeader:Define the extracted list as A, B, C, etc.. and start at Row 1 when reading the excel file."
		 23011									"ExtractIgnoreHeader:1:ExtractIgnoreHeader:Define the extracted list as A, B, C, etc.., ignore the header (Row 1) and start at Row 2 when reading the excel file."
		 23012									"ExtractDefineFromHeader:2:ExtractDefineFromHeader:Define the extracted list as the values in Row 1 and start at Row 2 when reading the excel file."
		 23013									"ExtractCustomDefine:3:ExtractCustomDefine: Copy the definition of the 2nd parameter for the output list. Data will still be mapped as as Row 1 = Row 1, Col 1 = Col 1."
		 23014									"ExtractCustomDefineIgnoreHeader:4:ExtractCustomDefineIgnoreHeader: Ignore the header in the excel file and copy the definition of the 2nd parameter for the output list. Data will still be mapped as as Row 1 = Row 1, Col 1 = Col 1."
		 23015									"ExtractMapFromHeader:5:ExtractMapFromHeader: Copy the definition of the 2nd parameter for the output list.  Data will be mapped to the name of the column.  List.MyColumn = FirstLineInExcel.MyColumn."
		 
		 //   Worksheet
		 23050									"Paper~PaperDefault:1:PaperDefault: Default paper size"
		 23051									"PaperLetter:2:PaperLetter: US Letter 8 1/2 x 11 in"
		 23052									"PaperLetterSmall:3:PaperLetterSmall: US Letter Small 8 1/2 x 11 in"
		 23053									"PaperTabloid:4:PaperTabloid: US Tabloid 11 x 17 in"
		 23054									"PaperLedger:5:PaperLedger: US Ledger 17 x 11 in"
		 23055									"PaperLegal:6:PaperLegal: US Legal 8 1/2 x 14 in"
		 23056									"PaperStatement:7:PaperStatement: US Statement 5 1/2 x 8 1/2 in"
		 23057									"PaperExecutive:8:PaperExecutive: US Executive 7 1/4 x 10 1/2 in"
		 23058									"PaperA3:9:PaperA3: A3 297 x 420 mm"
		 23059									"PaperA4:10:PaperA4: A4 210 x 297 mm"
		 23060									"PaperA4Small:11:PaperA4Small: A4 Small 210 x 297 mm"
		 23061									"PaperA5:12:PaperA5: A5 148 x 210 mm"
		 23062									"PaperB4:13:PaperB4: B4 (JIS) 250 x 354"
		 23063									"PaperB5:14:PaperB5: B5 (JIS) 182 x 257 mm"
		 23064									"PaperFolio:15:PaperFolio: Folio 8 1/2 x 13 in"
		 23065									"PaperQuatro:16:PaperQuatro: Quarto 215 x 275 mm"
		 23066									"Paper10x14:17:Paper10x14: 10 x 14 in"
		 23067									"Paper10x17:18:Paper10x17: 11 x 17 in"
		 23068									"PaperNote:19:PaperNote: US Note 8 1/2 x 11 in"
		 23069									"PaperEnvelope9:20:PaperEnvelope9: US Envelope #9 3 7/8 x 8 7/8"
		 23070									"PaperEnvelope10:21:PaperEnvelope10: US Envelope #10 4 1/8 x 9 1/2"
		 23071									"PaperEnvelope11:22:PaperEnvelope11: US Envelope #11 4 1/2 x 10 3/8"
		 23072									"PaperEnvelope12:23:PaperEnvelope12: US Envelope #12 4 3/4 x 11"
		 23073									"PaperEnvelope14:24:PaperEnvelope14: US Envelope #14 5 x 11 1/2"
		 23074									"PaperCSize:25:PaperCSize: C size sheet"
		 23075									"PaperDSize:26:PaperDSize: D size sheet"
		 23076									"PaperESize:27:PaperESize: E size sheet"
		 23077									"PaperEnvelopeDl:28:PaperEnvelopeDl: Envelope DL 110 x 220mm"
		 23078									"PaperEnvelopeC5:29:PaperEnvelopeC5: Envelope C5 162 x 229 mm"
		 23079									"PaperEnvelopeC3:30:PaperEnvelopeC3: Envelope C3 324 x 458 mm"
		 23080									"PaperEnvelopeC4:31:PaperEnvelopeC4: Envelope C4 229 x 324 mm"
		 23081									"PaperEnvelopeC6:32:PaperEnvelopeC6: Envelope C6 114 x 162 mm"
		 23082									"PaperEnvelopeC65:33:PaperEnvelopeC65: Envelope C65 114 x 229 mm"
		 23083									"PaperEnvelopeB4:34:PaperEnvelopeB4: Envelope B4 250 x 353 mm"
		 23084									"PaperEnvelopeB5:35:PaperEnvelopeB5: Envelope B5 176 x 250 mm"
		 23085									"PaperEnvelopeB6:36:PaperEnvelopeB6: Envelope B6 176 x 125 mm"
		 23086									"PaperEnvelope:37:PaperEnvelope: Envelope 110 x 230 mm"
		 23087									"PaperEnvelopeMonarch:38:PaperEnvelopeMonarch: US Envelope Monarch 3.875 x 7.5 in"
		 23088									"PaperUSEnvelope:39:PaperUSEnvelope: US Envelope 3 5/8 x 6 1/2 in"
		 23089									"PaperFanFold:40:PaperFanFold: US Std Fanfold 14 7/8 x 11 in"
		 23090									"PaperGermanStdFanFold:41:PaperGermanStdFanFold: German Std Fanfold 8 1/2 x 12 in"
		 23091									"PaperGermanLegalFanFold:42:PaperGermanLegalFanFold: German Legal Fanfold 8 1/2 x 13 in"
		 
		 //   Cell
		 23100									"CellType~TypeEmpty:1:TypeEmpty: Empty cell."
		 23101									"TypeNumber:2:TypeNumber:  Cell contains number data."
		 23102									"TypeString:3:TypeString:  Cell contains string data."
		 23103									"TypeBoolean:4:TypeBoolean:  Cell contains boolean data."
		 23104									"TypeDate:5:TypeDate: Cell contains date data."
		 23105									"TypeBlank:6:TypeBlank:  Cell contains blank data."
		 23106									"TypeError:7:TypeError:  Cell contains an error."
		 23107									"CellErrors~TypeErrorNull:1:TypeErrorNull:  Error - Cell contains null data. #NULL!"
		 23108									"TypeErrorDivByZero:2:TypeErrorDivByZero:  Error - Cell is attempting to divide by zero. #DIV/0!"
		 23109									"TypeErrorValue:3:TypeErrorValue:  Error - Cell formula is mixing text and values. #VALUE!"
		 23110									"TypeErrorRef:4:TypeErrorRef:  Error: Cell formula has invalid cell reference. #REF!"
		 23111									"TypeErrorName:5:TypeErrorName: Error - Cell formula has unrecognizable text.  #NAME!"
		 23112									"TypeErrorNum:6:TypeErrorNum: Error - Cell formula invalid numeric values.  #NUM!"
		 23113									"TypeErrorNA:7:TypeErrorNA: Error - Unknown error.  #N/A!"
		 23114									"TypeErrorNone:8:TypeErrorNone: No Error."
		 
		 //   Color
		 23150									"Color~ColorBlack:1:ColorBlack: Black Color."
		 23151									"ColorWhite:2:ColorWhite: White Color."
		 23152									"ColorRed:3:ColorRed: Red Color."
		 23153									"ColorBrightgreen:4:ColorBrightgreen: Bright Green Color."
		 23154									"ColorBlue:5:ColorBlue: Blue Color."
		 23155									"ColorYellow:6:ColorYellow: Yellow Color."
		 23156									"ColorPink:7:ColorPink: Pink Color."
		 23157									"ColorTurquoise:8:ColorTurquoise: Turquoise Color."
		 23158									"ColorDarkred:9:ColorDarkred: Darkred Color."
		 23159									"ColorGreen:10:ColorGreen: Green Color."
		 23160									"ColorDarkblue:11:ColorDarkblue: Dark Blue Color."
		 23161									"ColorDarkyellow:12:ColorDarkyellow: Dark Yellow Color."
		 23162									"ColorViolet:13:ColorViolet: Violet Color."
		 23163									"ColorTeal:14:ColorTeal: Teal Color."
		 23164									"ColorGray25:15:ColorGray25: Gray25 Color."
		 23165									"ColorGray50:16:ColorGray50: Gray50 Color."
		 23166									"ColorPeriwinkleCF:17:ColorPeriwinkleCF: Periwinkle CF Color."
		 23167									"ColorPlumCF:18:ColorPlumCF: Plum CF Color."
		 23168									"ColorIvoryCF:19:ColorIvoryCF: Ivory CF Color."
		 23169									"ColorLightturquoiseCF:20:ColorLightturquoiseCF: Light Turquoise CF Color."
		 23170									"ColorDarkpurpleCF:21:ColorDarkpurpleCF: Darkpurple CF Color."
		 23171									"ColorCoralCF:22:ColorCoralCF: Coral CF Color."
		 23172									"ColorOceanblueCF:23:ColorOceanblueCF: Ocean Blue CF Color."
		 23173									"ColorIceblueCF:24:ColorIceblueCF: Iceblue CF Color."
		 23174									"ColorDarkblueCL:25:ColorDarkblueCL: Darkblue CL Color."
		 23175									"ColorPinkCL:26:ColorPinkCL: Pink CL Color."
		 23176									"ColorYellowCL:27:ColorYellowCL: Yellow CL Color."
		 23177									"ColorTurquoiseCL:28:ColorTurquoiseCL: Turquoise CL Color."
		 23178									"ColorVioletCL:29:ColorVioletCL: Violet CL Color."
		 23179									"ColorDarkredCL:30:ColorDarkredCL: Darkred CL Color."
		 23180									"ColorTealCL:31:ColorTealCL: Teal CL Color."
		 23181									"ColorBlueCL:32:ColorBlueCL: Blue CL Color."
		 23182									"ColorSkyblue:33:ColorSkyblue: Skyblue Color."
		 23183									"ColorLightturquoise:34:ColorLightturquoise: Light Turquoise Color."
		 23184									"ColorLightgreen:35:ColorLightgreen: Light Green Color."
		 23185									"ColorLightyellow:36:ColorLightyellow: Light Yellow Color."
		 23186									"ColorPaleblue:37:ColorPaleblue: Pale Blue Color."
		 23187									"ColorRose:38:ColorRose: Rose Color."
		 23188									"ColorLavender:39:ColorLavender: Lavender Color."
		 23189									"ColorTan:40:ColorTan: Tan Color."
		 23190									"ColorLightblue:41:ColorLightblue: Light Blue Color."
		 23191									"ColorAqua:42:ColorAqua: Aqua Color."
		 23192									"ColorLime:43:ColorLime: Lime Color."
		 23193									"ColorGold:44:ColorGold: Gold Color."
		 23194									"ColorLightorange:45:ColorLightorange: Light Orange Color."
		 23195									"ColorOrange:46:ColorOrange: Orange Color."
		 23196									"ColorBluegray:47:ColorBluegray: Blue-Gray Color."
		 23197									"ColorGray40:48:ColorGray40: Gray40 Color."
		 23198									"ColorDarkteal:49:ColorDarkteal: Dark Teal Color."
		 23199									"ColorSeagreen:50:ColorSeagreen: Sea Green Color."
		 23200									"ColorDarkgreen:51:ColorDarkgreen: DarkG reen Color."
		 23201									"ColorOlivegreen:52:ColorOlivegreen: Olive Green Color."
		 23202									"ColorBrown:53:ColorBrown: Brown Color."
		 23203									"ColorPlum:54:ColorPlum: Plum Color."
		 23204									"ColorIndigo:55:ColorIndigo: Indigo Color."
		 23205									"ColorGray80:56:ColorGray80: Gray80 Color."
		 23206									"ColorDefaultForeground:57:ColorDefaultForeground: Default Foreground Color."
		 23207									"ColorDefaultBackground:58:ColorDefaultBackground: Default Background Color."
		 23208									"ColorTooltip:59:ColorTooltip: Tooltip color. (Cannot be set to this Color, it is internal only.)"
		 23209									"ColorAuto:60:ColorAuto: Automatic color.  (Cannot be set to this Color, it is internal only.)"
		 
		 // Number Format
		 23250									"NumberFormats~NumFormatGeneral:1:NumFormatGeneral: general format"
		 23251									"NumFormatNumber:2:NumFormatNumber: general number	1000"
		 23252									"NumFormatNumber_d2:3:NumFormatNumber_d2: number with decimal point	1000.00"
		 23253									"NumFormatNumber_sep:4:NumFormatNumber_sep: number with thousands separator	100,000"
		 23254									"NumFormatNumber_sep_d2:5:NumFormatNumber_sep_d2: number with decimal point and thousands separator	100,000.00"
		 23255									"NumFormatCurrency_negbra:6:NumFormatCurrency_negbra: monetary value, negative in brackets	(1000$)"
		 23256									"NumFormatCurrency_negbrared:7:NumFormatCurrency_negbrared: monetary value, negative is red in brackets	(1000$)"
		 23257									"NumFormatCurrency_d2_negbra:8:NumFormatCurrency_d2_negbra: monetary value with decimal point, negative in brackets	($1000.00)"
		 23258									"NumFormatCurrency_d2_negbrared:9:NumFormatCurrency_d2_negbrared: monetary value with decimal point, negative is red in brackets	($1000.00)"
		 23259									"NumFormatPercent:10:NumFormatPercent: percent value, multiply the cell value by 100	75%"
		 23260									"NumFormatPercent_d2:11:NumFormatPercent_d2: percent value with decimal point, multiply the cell value by 100	75.00%"
		 23261									"NumFormatScientific_d2:12:NumFormatScientific_d2: scientific value with E character and decimal point	10.00E+1"
		 23262									"NumFormatFraction_onedig:13:NumFormatFraction_onedig: fraction value, one digit	10 1/2"
		 23263									"NumFormatFraction_twodig:14:NumFormatFraction_twodig: fraction value, two digits	10 23/95"
		 23264									"NumFormatDate:15:NumFormatDate: date value, depends on OS settings	3/11/2009"
		 23265									"NumFormatCustom_d_mon_yy:16:NumFormatCustom_d_mon_yy: custom date value	11-Mar-09"
		 23266									"NumFormatCustom_d_mon:17:NumFormatCustom_d_mon: custom date value	11-Mar"
		 23267									"NumFormatCustom_mon_yy:18:NumFormatCustom_mon_yy: custom date value	Mar-09"
		 23268									"NumFormatCustom_hmm_am:19:NumFormatCustom_hmm_am: custom date value	8:30 AM"
		 23269									"NumFormatCustom_hmmss_am:20:NumFormatCustom_hmmss_am: custom date value	8:30:00 AM"
		 23270									"NumFormatCustom_hmm:21:NumFormatCustom_hmm: custom date value	8:30"
		 23271									"NumFormatCustom_hmmss:22:NumFormatCustom_hmmss: custom date value	8:30:00"
		 23272									"NumFormatCustom_mdyyyy_hmm:23:NumFormatCustom_mdyyyy_hmm: custom datetime value	3/11/2009 8:30"
		 23273									"NumFormatNumber_sep_negbra:24:NumFormatNumber_sep_negbra: number with thousands separator, negative in brackets	(4,000)"
		 23274									"NumFormatNumber_sep_negbrared:25:NumFormatNumber_sep_negbrared: number with thousands separator, negative is red in brackets	(4,000)"
		 23275									"NumFormatNumber_d2_sep_negbra:26:NumFormatNumber_d2_sep_negbra: number with thousands separator and decimal point, negative in brackets	(4,000.00)"
		 23276									"NumFormatNumber_d2_sep_negbrared:27:NumFormatNumber_d2_sep_negbrared: number with thousands separator and decimal point, negative is red in brackets	(4,000.00)"
		 23277									"NumFormatAccount:28:NumFormatAccount: account value	5,000"
		 23278									"NumFormatAccountcur:29:NumFormatAccountcur: account value with currency symbol	$5,000"
		 23279									"NumFormatAccount_d2:30:NumFormatAccount_d2: account value with decimal point	5,000.00"
		 23280									"NumFormatAccount_d2_cur:31:NumFormatAccount_d2_cur: account value with currency symbol and decimal point	$5,000.00"
		 23281									"NumFormatCustom_mmss:32:NumFormatCustom_mmss: custom time value	30:55"
		 23282									"NumFormatCustom_h0mmss:33:NumFormatCustom_h0mmss: custom time value	20:30:55"
		 23283									"NumFormatCustom_mmss0:34:NumFormatCustom_mmss0: custom time value	30:55.0"
		 23284									"NumFormatCustom_000p0e_plus0:35:NumFormatCustom_000p0e_plus0: custom value	15.2E+3"
		 23285									"NumFormatText:36:NumFormatText: text value	any text"
		 
		 // Horizontal Align
		 23300									"HorzAlignment~AlignHGeneral:1:AlignHGeneral: General Horizontal Alignment"
		 23301									"AlignHLeft:2:AlignHLeft: Left Horizontal Alignment"
		 23302									"AlignHCenter:3:AlignHCenter: Center Horizontal Alignment"
		 23303									"AlignHRight:4:AlignHRight: Right Horizontal Alignment"
		 23304									"AlignHFill:5:AlignHFill: Fill Horizontal Alignment"
		 23305									"AlignHJustify:6:AlignHJustify: Justify Horizontal Alignment"
		 23306									"AlignHMerge:7:AlignHMerge: Merge Horizontal Alignment"
		 23307									"AlignHDistributed:8:AlignHDistributed: Distributed Horizontal Alignment"
		 
		 // Vertical Align
		 23350									"VertAlignment~AlignVTop:1:AlignVTop: Top Vertical Alignment"
		 23351									"AlignVCenter:2:AlignVCenter: Center Vertical Alignment"
		 23352									"AlignVBottom:3:AlignVBottom: Bottom Vertical Alignment"
		 23353									"AlignVJustify:4:AlignVJustify: Justify Vertical Alignment"
		 23354									"AlignVDistributed:5:AlignVDistributed: Distributed Vertical Alignment"
		 
		 // Border Style
		 23400									"BorderStyle~BorderStyleNone:1:BorderStyleNone: None border."
		 23401									"BorderStyleThin:2:BorderStyleThin: Thin border."
		 23402									"BorderStyleMedium:3:BorderStyleMedium: Medium border."
		 23403									"BorderStyleDashed:4:BorderStyleDashed: Dashed border."
		 23404									"BorderStyleDotted:5:BorderStyleDotted: Dotted border."
		 23405									"BorderStyleThick:6:BorderStyleThick: Thick border."
		 23406									"BorderStyleDouble:7:BorderStyleDouble: Double border."
		 23407									"BorderStyleHair:8:BorderStyleHair: Hair border."
		 23408									"BorderStyleMediumDashed:9:BorderStyleMediumDashed: Medium Dashed border."
		 23409									"BorderStyleDashDot:10:BorderStyleDashDot: Dash-dot border."
		 23410									"BorderStyleMediumDashDot:11:BorderStyleMediumDashDot: Medium Dash dot border."
		 23411									"BorderStyleDashDotDot:12:BorderStyleDashDotDot: Dash-dot-dot border."
		 23412									"BorderStyleMediumDashDotDot:13:BorderStyleMediumDashDotDot: Medium Dash dot dot border."
		 23413									"BorderStyleSlantDashDot:14:BorderStyleSlantDashDot: Slant Dash dot border."
		 
		 // Diagonal Border Style
		 23450									"DiagnolBorderStyle~BorderDiagonalNone:1:BorderDiagonalNone: No diagonal border."
		 23451									"BorderDiagonalDown:2:BorderDiagonalDown: Downward Left Right diagonal border."
		 23452									"BorderDiagonalUp:3:BorderDiagonalUp: Upward Left Right diagonal border."
		 23453									"BorderDiagonalBoth:4:BorderDiagonalBoth: Both upwards and downwards diagonal border."
		 
		 // Fill Pattern Style
		 23500									"FillPatterns~FillPatternNone:1:FillPatternNone: None fill pattern."
		 23501									"FillPatternSolid:2:FillPatternSolid: Solid fill pattern."
		 23502									"FillPatternGray50:3:FillPatternGray50: 50% Gray fill pattern."
		 23503									"FillPatternGray75:4:FillPatternGray75: 75% Gray fill pattern."
		 23504									"FillPatternGray25:5:FillPatternGray25: 25% Gray fill pattern."
		 23505									"FillPatternHorstripe:6:FillPatternHorstripe: Horizontal stripe fill pattern."
		 23506									"FillPatternVerstripe:7:FillPatternVerstripe: Vertical stripe fill pattern."
		 23507									"FillPatternRevdiagstripe:8:FillPatternRevdiagstripe: Reverse diagonal stripe fill pattern."
		 23508									"FillPatternDiagstripe:9:FillPatternDiagstripe: Diagonal stripe fill pattern."
		 23509									"FillPatternDiagcrosshatch:10:FillPatternDiagcrosshatch: Diagonal cross hatch fill pattern."
		 23510									"FillPatternThickdiagcrosshatch:11:FillPatternThickdiagcrosshatch: Thick diagonal cross hatch fill pattern."
		 23511									"FillPatternThinhorstripe:12:FillPatternThinhorstripe: Thin horizontal stripe fill pattern."
		 23512									"FillPatternThinverstripe:13:FillPatternThinverstripe: Thin vertrical stripe fill pattern."
		 23513									"FillPatternThinrevdiagstripe:14:FillPatternThinrevdiagstripe: Thin reverse diagonal stripe fill pattern."
		 23514									"FillPatternThindiagstripe:15:FillPatternThindiagstripe: Thin diagonal stripe fill pattern."
		 23515									"FillPatternThinhorcrosshatch:16:FillPatternThinhorcrosshatch: Thin horizontal cross hatch fill pattern."
		 23516									"FillPatternThindiagcrosshatch:17:FillPatternThindiagcrosshatch: Thin diagonal cross hatch fill pattern."
		 23517									"FillPatternGray12p5:18:FillPatternGray12p5: Gray 12.5 fill pattern."
		 23518									"FillPatternGray6p25:19:FillPatternGray6p25: Gray 6.25 fill pattern."
		 
		 // Script Style
		 23550									"ScriptStyle~ScriptNormal:1:ScriptNormal: Normal text script."
		 23551									"ScriptSuper:2:ScriptSuper: Super script text."
		 23552									"ScriptSub:3:ScriptSub: Subscript text."
		 
		 // Underline Style
		 23600									"UnderlineStyle~UnderlineNone:1:UnderlineNone: No underline style."
		 23601									"UnderlineSingle:2:UnderlineSingle: Single underline style."
		 23602									"UnderlineDouble:3:UnderlineDouble: Double underline style."
		 23603									"UnderlineSingleAcc:4:UnderlineSingleAcc: Single accounting underline style."
		 23604									"UnderlineDoubleAcc:5:UnderlineDoubleAcc: Double accounting underline style."
		 
		 // Error Constants
		 24000									"Errors~ErrNone:0:ErrNone:No error"
		 24001									"ErrBadMethod:-101:ErrBadMethod:Bad method index (internal error)"
		 24002									"ErrBadParams:-102:ErrBadParams:Invalid or invalid number of paramters have been passed to the method"
		 24003									"ErrMemory:-103:ErrMemory:Out of memory"
		 24004									"ErrNotSupported:-104:ErrNotSupported:The feature is not supported"
		 24005									"ErrBadCalculation:-105:ErrBadCalculation:Calculation is invalid"
		 
		 31000									"NVObjWndProc"
END


